<?php
// $Id$

/**
 * @file
 * Adds more granular permissions for items under 'administer site configuration'.
 *
 * Development by Doc (Sjoerd Arendsen) sjoerd@optixdesigns.com
 * www.optixdesigns.com
 * 
 * Initial development by mrthumpz (Todd Humphrey) todd@iplanitglobal.com
 * www.iplanitglobal.com
 */

/**
 * Load all permissions
 */
function config_perms_perms() {
  // Load perms via ctools is present.
  if (module_exists('ctools')) {
    ctools_include('export');
    $loaded = ctools_export_load_object('config_perms', 'all');
    foreach ($loaded as $name => $perm) {
      $perms[$name] = (array) $perm;
    }
    return $perms;
  }
  
  // Load current perms
  $perms = cache_get('config_perms');
  
  // Rebuild if not there
  if(!is_array($perms->data)) {
    config_perms_cache_rebuild();
    $perms = cache_get('config_perms');
  }
  
  return $perms->data;
}

/**
 * Configure permission names for urls:
 */
function config_perms_cache_rebuild() {
  $perms = array();
  $result = db_query("SELECT * FROM {config_perms} WHERE status = 1");
  while ($data = db_fetch_array($result)) {
    //$perms[check_plain($data->name)][] = check_plain($data->path);
    $perms[$data->pid] = $data;
  }
  
  cache_set('config_perms', $perms);
}

/*******************************************************************************
 * Hook Functions
 ******************************************************************************/
/*

/**
 * Implementation of hook_perm
 * Administer -> User management -> Permissions
 */
function config_perms_perm() {
 return array_keys(config_perms_perms());
}

/**
 * Implementation of hook_flush_caches().
 */
function config_perms_flush_caches() {
  cache_clear_all('config_perms', 'cache');
}


/**
 * Implementation of hook_theme();.
 */
function config_perms_theme() {
  return array(
    'config_perms_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'config_perms.admin.inc',
    ),
  );
}

/**
 * Implementation of hook_menu().
*/
function config_perms_menu() {
  $items = array();
  
  $items['config_perms/ahah'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'config_perms_ahah',
    'page arguments' => array(),
    'access arguments' => array('administer site configuration'),
    'file' => 'config_perms.admin.inc',
  );
  $items['admin/settings/config_perms'] = array(
    'title' => 'Site Configuration Permissions',
    'description' => 'Adds more granular permissions for items under \'administer site configuration\'',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('config_perms_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'config_perms.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}
 
/**
* Implementation of hook_menu_alter().
*/
function config_perms_menu_alter(&$items) {
  foreach (config_perms_perms() as $perm => $urls) {
    foreach ($urls as $url) {      
      $items[$url]['access callback'] = 'config_perms_access_callback';
      $items[$url]['access arguments'] = array($perm);
    }
  }
  // administer themes:
  foreach (list_themes() as $theme) {
    $items['admin/build/themes/settings/'. $theme->name]['access callback'] = 'config_perms_themes_access';
    $items['admin/build/themes/settings/'. $theme->name]['access arguments'] = array($theme);
  }
}

/**
* Access callback for each theme's settings
*/
function config_perms_themes_access($theme) {
  //return (user_access('administer themes') || user_access('administer site configuration')) && ($theme->status || $theme->name == variable_get('admin_theme', '0'));
  return (user_access('administer theme selection') && ($theme->status || $theme->name == variable_get('admin_theme', '0')));
}
 
/**
* Access callback
*/
function config_perms_access_callback($perm) {  
  return user_access($perm);
}

/*******************************************************************************
 * Ctools
 ******************************************************************************/
/*

/**
* Load one preset or all presets.
*
* @param $name
*   This perm name value. Optional.
* @return
*   If $name is specified, an array of options for the specific preset.
*   If not, a nested array containing options for all presets.
*/
function config_perms_load($name = null) {
  // Load perms via ctools is present.
  if (module_exists('ctools')) {
    ctools_include('export');
    if ($name) {
      $perms = ctools_export_load_object('config_perms', 'names', array($name));
      return isset($perms[$name]) ? $perms[$name] : FALSE;
    }
    else {
      return ctools_export_load_object('config_perms');
    }
  }
  
  // Load current perms
  $perms = cache_get('config_perms');
  
  // Rebuild if not there
  if(!is_array($perms->data)) {
    config_perms_cache_rebuild();
    $perms = cache_get('config_perms');
  }
  
  return ($name) ? $perms->data[$name] : $perms->data;
}


/**
* Delete a perm.
*
* @param $name
*   A perm object, or a preset's pid value.
*/
function config_perms_delete($perm) {
  $name = is_object($perm) ? $perm->name : $perm;
  db_query('DELETE FROM {config_perms} WHERE pid = %d', $name);
  
  if (module_exists('ctools')) {
    // Clear the Ctools export API cache.
    ctools_include('export');
    ctools_export_load_object_reset('config_perms');
  }
}


/**
* Implementation of hook_ctools_plugin_api().
*
* Tell Ctools that we support the default_ffmpeg_converter_presets API.

function config_perms_ctools_plugin_api($owner, $api) {
  if ($owner == 'config_perms' && $api == 'config_perms_defaults') {
    return array('version' => 1);
  }
}

/**
* Implementation of hook_default_ffmpeg_converter_preset().
*
* Provide a couple of default presets.

function config_perms_default_config_perms() {
  $export = array();

  $preset = new stdClass;
  $preset->api_version = 1;
  $preset->name = 'default_flv';
  $preset->description = 'Default FLV preset';
  $preset->ffmpeg_wrapper = ffmpeg_converter_default_options();
  $export['default-flv'] = $preset;

  return $export;
}
*/
